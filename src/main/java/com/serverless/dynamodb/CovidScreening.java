package com.serverless.dynamodb;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER_COVIDSCREENING_TABLE_NAME")
public class CovidScreening {

    // get the table name from env. var. set in serverless.yml
    private static final String COVIDSCREENING_TABLE_NAME = System.getenv("COVIDSCREENING_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String id;
    private String name;
    private String phone;
    private String date;
    private boolean answer1;
    private boolean answer2;
    private boolean answer3;
    private boolean answer4;
    private boolean answer5;
    private boolean answer6;



    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "phone")
    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @DynamoDBAttribute(attributeName = "date")
    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    @DynamoDBAttribute(attributeName = "answer1")
    public boolean isAnswer1() {
        return answer1;
    }

    public void setAnswer1(boolean answer1) {
        this.answer1 = answer1;
    }

    @DynamoDBAttribute(attributeName = "answer2")
    public boolean isAnswer2() {
        return answer2;
    }

    public void setAnswer2(boolean answer2) {
        this.answer2 = answer2;
    }

    @DynamoDBAttribute(attributeName = "answer3")
    public boolean isAnswer3() {
        return answer3;
    }


    public void setAnswer3(boolean answer3) {
        this.answer3 = answer3;
    }

    @DynamoDBAttribute(attributeName = "answer4")
    public boolean isAnswer4() {
        return answer4;
    }


    public void setAnswer4(boolean answer4) {
        this.answer4 = answer4;
    }

    @DynamoDBAttribute(attributeName = "answer5")
    public boolean isAnswer5() {
        return answer5;
    }

    public void setAnswer5(boolean answer5) {
        this.answer5 = answer5;
    }

    public boolean isAnswer6() {
        return answer6;
    }

    public void setAnswer6(boolean answer6) {
        this.answer6 = answer6;
    }

    public CovidScreening() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(COVIDSCREENING_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("CovidScreening [id=%s, name=%s, phone=%s, date=%s, answer1=%b]", this.id, this.name, this.phone, this.date, this.isAnswer1());
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(COVIDSCREENING_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<CovidScreening> list() throws IOException {
      DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
      List<CovidScreening> results = this.mapper.scan(CovidScreening.class, scanExp);
      for (CovidScreening p : results) {
        logger.info("CovidScreening - list(): " + p.toString());
      }
      return results;
    }

    public CovidScreening get(String id) throws IOException {
        CovidScreening covidScreening = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<CovidScreening> queryExp = new DynamoDBQueryExpression<CovidScreening>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<CovidScreening> result = this.mapper.query(CovidScreening.class, queryExp);
        if (result.size() > 0) {
          covidScreening = result.get(0);
          logger.info("CovidScreening - get(): covidScreening - " + covidScreening.toString());
        } else {
          logger.info("CovidScreening - get(): covidScreening - Not Found.");
        }
        return covidScreening;
    }

    public void save(CovidScreening covidScreening) throws IOException {
        logger.info("CovidScreening - save(): " + covidScreening.toString());
        this.mapper.save(covidScreening);
    }

    public Boolean delete(String id) throws IOException {
        CovidScreening covidScreening = null;

        // get covidScreening if exists
        covidScreening = get(id);
        if (covidScreening != null) {
          logger.info("CovidScreening - delete(): " + covidScreening.toString());
          this.mapper.delete(covidScreening);
        } else {
          logger.info("CovidScreening - delete(): covidScreening - does not exist.");
          return false;
        }
        return true;
    }

}
